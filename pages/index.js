import Head from 'next/head'

export default function Home() {
  return (
    <div>
      <header >
        <div className="container  h-100 mb-5">
          <div className="row h-100 align-items-center">
            <div className="col-12 text-center">
              <h1 className="mt-5 text-white">
                Voxualize
              </h1>

              <p className="description text-white mb-5">
                <i>A hybrid approch to volume rendering</i>
              </p>
              <img src="./logo.png" height="200px" />
            </div>
          </div>
        </div>
      </header>
      <div className="container bg-light rounded p-5">

        <h2 className="bg-light">
          Problem statement:
      </h2>
        <p className="description">
          Astronomical data is rapidly increasing in both size and complexity. Most current vizualization tools are not adequately equipped to deal with this data boom. Current tools are often forced to load the entire data cube into memory which is practically impossible in most cases. Visualization tools often lack 3D rendering capabilities as well, further reducing their usefulness.
      </p>
        <h2 className="mt-5">
          CARTA:  
      </h2>
        <p className="description">
          CARTA (Cube Analysis and Rendering Tool for Astronomy) is one of the leading astronomical visualization tools. It employs a client-server architecture that delegates the expensive processing and rendering to an enterprise-grade server, and exposes a web-based user-interface. The data cube is also downsampled before rendering allowing it to circumvent the memory problems present in most current solutions. CARTA however, has no 3D rendering capabilities. This project aims to implement a prototype that explores a scalable 3D rendering solution that can be integrated into CARTA.
      </p>

        <h2 className="mt-5">
          Aims:
      </h2>
        <p className="description">
          The aim of this project is to implement a 3D rendering prototype that can eventually integrate into CARTA. The protoype needs to:
       <ul>
            <li>Be capable of 3D visualization</li>
            <li>Be able to render very large cubes at interactive rates</li>
            <li>Allow for detailed analysis of the data cube</li>
            <li>Use a similar client-server architecture to CARTA</li>
          </ul>
        </p>

        <h2 className="mt-5">
          Our solution:
      </h2>
        <p className="description">
          The application is in the form of a client-server application. The client is written in React and the server is written in C++. The client and server communicate via gRPC.
      </p>

        <p className="description">
          We decided to implement a hybrid-rendering model to satisfy our aims above. When the user selects a data cube to render, it downsamples the large model to a target size (initially 10mb).
          The server then sends this high quality model to the frontend. The frontend then renders this level-of-detail (LOD) model and the user can begin interacting with it. Once the user stops interacting with the model for a small amount of time (~200ms),
          a high quality image is generated by the server, which exactly matches the orientation of the LOD model. The LOD model is then replaced with this image, allowing more detailed analysis to be performed.
          Once the user starts interacting with the cube again, the view switches back to the LOD model. This approach allows large datacubes to be analyzed at interactive framerates while also providing enough detail for visual analysis.
          <br/>  <br/>
          The sequence diagram below details the communication between the client and server.
        </p>
        <div className="text-center mt-5 mb-5">
          <img src="sequence.png" ></img>
        </div>
        <p className="description">
          The client and server sections contain the specific details about their implementation.
      </p>
      </div>
    </div>
  )
}
